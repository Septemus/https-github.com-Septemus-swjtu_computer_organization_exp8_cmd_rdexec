// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2023 15:12:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp8_vlg_sample_tst(
	cin,
	clk,
	enact,
	key_out,
	M,
	manual_plus,
	pc_clr,
	RA,
	rd,
	wr,
	sampler_tx
);
input  cin;
input  clk;
input  enact;
input [7:0] key_out;
input [1:0] M;
input  manual_plus;
input  pc_clr;
input [1:0] RA;
input  rd;
input  wr;
output sampler_tx;

reg sample;
time current_time;
always @(cin or clk or enact or key_out or M or manual_plus or pc_clr or RA or rd or wr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp8_vlg_check_tst (
	opt1,
	opt2,
	PC,
	R0,
	R1,
	R2,
	R3,
	res_alu,
	res_dest,
	sampler_rx
);
input [7:0] opt1;
input [7:0] opt2;
input [7:0] PC;
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] R3;
input [7:0] res_alu;
input [1:0] res_dest;
input sampler_rx;

reg [7:0] opt1_expected;
reg [7:0] opt2_expected;
reg [7:0] PC_expected;
reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] R3_expected;
reg [7:0] res_alu_expected;
reg [1:0] res_dest_expected;

reg [7:0] opt1_prev;
reg [7:0] opt2_prev;
reg [7:0] PC_prev;
reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] R3_prev;
reg [7:0] res_alu_prev;
reg [1:0] res_dest_prev;

reg [7:0] opt1_expected_prev;
reg [7:0] opt2_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] R3_expected_prev;
reg [7:0] res_alu_expected_prev;
reg [1:0] res_dest_expected_prev;

reg [7:0] last_opt1_exp;
reg [7:0] last_opt2_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_R3_exp;
reg [7:0] last_res_alu_exp;
reg [1:0] last_res_dest_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	opt1_prev = opt1;
	opt2_prev = opt2;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	res_alu_prev = res_alu;
	res_dest_prev = res_dest;
end

// update expected /o prevs

always @(trigger)
begin
	opt1_expected_prev = opt1_expected;
	opt2_expected_prev = opt2_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	res_alu_expected_prev = res_alu_expected;
	res_dest_expected_prev = res_dest_expected;
end


// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// expected opt1[ 7 ]
initial
begin
	opt1_expected[7] = 1'bX;
end 
// expected opt1[ 6 ]
initial
begin
	opt1_expected[6] = 1'bX;
end 
// expected opt1[ 5 ]
initial
begin
	opt1_expected[5] = 1'bX;
end 
// expected opt1[ 4 ]
initial
begin
	opt1_expected[4] = 1'bX;
end 
// expected opt1[ 3 ]
initial
begin
	opt1_expected[3] = 1'bX;
end 
// expected opt1[ 2 ]
initial
begin
	opt1_expected[2] = 1'bX;
end 
// expected opt1[ 1 ]
initial
begin
	opt1_expected[1] = 1'bX;
end 
// expected opt1[ 0 ]
initial
begin
	opt1_expected[0] = 1'bX;
end 
// expected opt2[ 7 ]
initial
begin
	opt2_expected[7] = 1'bX;
end 
// expected opt2[ 6 ]
initial
begin
	opt2_expected[6] = 1'bX;
end 
// expected opt2[ 5 ]
initial
begin
	opt2_expected[5] = 1'bX;
end 
// expected opt2[ 4 ]
initial
begin
	opt2_expected[4] = 1'bX;
end 
// expected opt2[ 3 ]
initial
begin
	opt2_expected[3] = 1'bX;
end 
// expected opt2[ 2 ]
initial
begin
	opt2_expected[2] = 1'bX;
end 
// expected opt2[ 1 ]
initial
begin
	opt2_expected[1] = 1'bX;
end 
// expected opt2[ 0 ]
initial
begin
	opt2_expected[0] = 1'bX;
end 
// expected res_alu[ 7 ]
initial
begin
	res_alu_expected[7] = 1'bX;
end 
// expected res_alu[ 6 ]
initial
begin
	res_alu_expected[6] = 1'bX;
end 
// expected res_alu[ 5 ]
initial
begin
	res_alu_expected[5] = 1'bX;
end 
// expected res_alu[ 4 ]
initial
begin
	res_alu_expected[4] = 1'bX;
end 
// expected res_alu[ 3 ]
initial
begin
	res_alu_expected[3] = 1'bX;
end 
// expected res_alu[ 2 ]
initial
begin
	res_alu_expected[2] = 1'bX;
end 
// expected res_alu[ 1 ]
initial
begin
	res_alu_expected[1] = 1'bX;
end 
// expected res_alu[ 0 ]
initial
begin
	res_alu_expected[0] = 1'bX;
end 
// expected res_dest[ 1 ]
initial
begin
	res_dest_expected[1] = 1'bX;
end 
// expected res_dest[ 0 ]
initial
begin
	res_dest_expected[0] = 1'bX;
end 
// generate trigger
always @(opt1_expected or opt1 or opt2_expected or opt2 or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or res_alu_expected or res_alu or res_dest_expected or res_dest)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected opt1 = %b | expected opt2 = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected res_alu = %b | expected res_dest = %b | ",opt1_expected_prev,opt2_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,res_alu_expected_prev,res_dest_expected_prev);
	$display("| real opt1 = %b | real opt2 = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | real res_alu = %b | real res_dest = %b | ",opt1_prev,opt2_prev,PC_prev,R0_prev,R1_prev,R2_prev,R3_prev,res_alu_prev,res_dest_prev);
`endif
	if (
		( opt1_expected_prev[0] !== 1'bx ) && ( opt1_prev[0] !== opt1_expected_prev[0] )
		&& ((opt1_expected_prev[0] !== last_opt1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[0] = opt1_expected_prev[0];
	end
	if (
		( opt1_expected_prev[1] !== 1'bx ) && ( opt1_prev[1] !== opt1_expected_prev[1] )
		&& ((opt1_expected_prev[1] !== last_opt1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[1] = opt1_expected_prev[1];
	end
	if (
		( opt1_expected_prev[2] !== 1'bx ) && ( opt1_prev[2] !== opt1_expected_prev[2] )
		&& ((opt1_expected_prev[2] !== last_opt1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[2] = opt1_expected_prev[2];
	end
	if (
		( opt1_expected_prev[3] !== 1'bx ) && ( opt1_prev[3] !== opt1_expected_prev[3] )
		&& ((opt1_expected_prev[3] !== last_opt1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[3] = opt1_expected_prev[3];
	end
	if (
		( opt1_expected_prev[4] !== 1'bx ) && ( opt1_prev[4] !== opt1_expected_prev[4] )
		&& ((opt1_expected_prev[4] !== last_opt1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[4] = opt1_expected_prev[4];
	end
	if (
		( opt1_expected_prev[5] !== 1'bx ) && ( opt1_prev[5] !== opt1_expected_prev[5] )
		&& ((opt1_expected_prev[5] !== last_opt1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[5] = opt1_expected_prev[5];
	end
	if (
		( opt1_expected_prev[6] !== 1'bx ) && ( opt1_prev[6] !== opt1_expected_prev[6] )
		&& ((opt1_expected_prev[6] !== last_opt1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[6] = opt1_expected_prev[6];
	end
	if (
		( opt1_expected_prev[7] !== 1'bx ) && ( opt1_prev[7] !== opt1_expected_prev[7] )
		&& ((opt1_expected_prev[7] !== last_opt1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt1_expected_prev);
		$display ("     Real value = %b", opt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opt1_exp[7] = opt1_expected_prev[7];
	end
	if (
		( opt2_expected_prev[0] !== 1'bx ) && ( opt2_prev[0] !== opt2_expected_prev[0] )
		&& ((opt2_expected_prev[0] !== last_opt2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[0] = opt2_expected_prev[0];
	end
	if (
		( opt2_expected_prev[1] !== 1'bx ) && ( opt2_prev[1] !== opt2_expected_prev[1] )
		&& ((opt2_expected_prev[1] !== last_opt2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[1] = opt2_expected_prev[1];
	end
	if (
		( opt2_expected_prev[2] !== 1'bx ) && ( opt2_prev[2] !== opt2_expected_prev[2] )
		&& ((opt2_expected_prev[2] !== last_opt2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[2] = opt2_expected_prev[2];
	end
	if (
		( opt2_expected_prev[3] !== 1'bx ) && ( opt2_prev[3] !== opt2_expected_prev[3] )
		&& ((opt2_expected_prev[3] !== last_opt2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[3] = opt2_expected_prev[3];
	end
	if (
		( opt2_expected_prev[4] !== 1'bx ) && ( opt2_prev[4] !== opt2_expected_prev[4] )
		&& ((opt2_expected_prev[4] !== last_opt2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[4] = opt2_expected_prev[4];
	end
	if (
		( opt2_expected_prev[5] !== 1'bx ) && ( opt2_prev[5] !== opt2_expected_prev[5] )
		&& ((opt2_expected_prev[5] !== last_opt2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[5] = opt2_expected_prev[5];
	end
	if (
		( opt2_expected_prev[6] !== 1'bx ) && ( opt2_prev[6] !== opt2_expected_prev[6] )
		&& ((opt2_expected_prev[6] !== last_opt2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[6] = opt2_expected_prev[6];
	end
	if (
		( opt2_expected_prev[7] !== 1'bx ) && ( opt2_prev[7] !== opt2_expected_prev[7] )
		&& ((opt2_expected_prev[7] !== last_opt2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opt2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opt2_expected_prev);
		$display ("     Real value = %b", opt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opt2_exp[7] = opt2_expected_prev[7];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( res_alu_expected_prev[0] !== 1'bx ) && ( res_alu_prev[0] !== res_alu_expected_prev[0] )
		&& ((res_alu_expected_prev[0] !== last_res_alu_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[0] = res_alu_expected_prev[0];
	end
	if (
		( res_alu_expected_prev[1] !== 1'bx ) && ( res_alu_prev[1] !== res_alu_expected_prev[1] )
		&& ((res_alu_expected_prev[1] !== last_res_alu_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[1] = res_alu_expected_prev[1];
	end
	if (
		( res_alu_expected_prev[2] !== 1'bx ) && ( res_alu_prev[2] !== res_alu_expected_prev[2] )
		&& ((res_alu_expected_prev[2] !== last_res_alu_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[2] = res_alu_expected_prev[2];
	end
	if (
		( res_alu_expected_prev[3] !== 1'bx ) && ( res_alu_prev[3] !== res_alu_expected_prev[3] )
		&& ((res_alu_expected_prev[3] !== last_res_alu_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[3] = res_alu_expected_prev[3];
	end
	if (
		( res_alu_expected_prev[4] !== 1'bx ) && ( res_alu_prev[4] !== res_alu_expected_prev[4] )
		&& ((res_alu_expected_prev[4] !== last_res_alu_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[4] = res_alu_expected_prev[4];
	end
	if (
		( res_alu_expected_prev[5] !== 1'bx ) && ( res_alu_prev[5] !== res_alu_expected_prev[5] )
		&& ((res_alu_expected_prev[5] !== last_res_alu_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[5] = res_alu_expected_prev[5];
	end
	if (
		( res_alu_expected_prev[6] !== 1'bx ) && ( res_alu_prev[6] !== res_alu_expected_prev[6] )
		&& ((res_alu_expected_prev[6] !== last_res_alu_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[6] = res_alu_expected_prev[6];
	end
	if (
		( res_alu_expected_prev[7] !== 1'bx ) && ( res_alu_prev[7] !== res_alu_expected_prev[7] )
		&& ((res_alu_expected_prev[7] !== last_res_alu_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_alu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_alu_expected_prev);
		$display ("     Real value = %b", res_alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res_alu_exp[7] = res_alu_expected_prev[7];
	end
	if (
		( res_dest_expected_prev[0] !== 1'bx ) && ( res_dest_prev[0] !== res_dest_expected_prev[0] )
		&& ((res_dest_expected_prev[0] !== last_res_dest_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_dest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_dest_expected_prev);
		$display ("     Real value = %b", res_dest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_res_dest_exp[0] = res_dest_expected_prev[0];
	end
	if (
		( res_dest_expected_prev[1] !== 1'bx ) && ( res_dest_prev[1] !== res_dest_expected_prev[1] )
		&& ((res_dest_expected_prev[1] !== last_res_dest_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_dest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_dest_expected_prev);
		$display ("     Real value = %b", res_dest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_res_dest_exp[1] = res_dest_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg clk;
reg enact;
reg [7:0] key_out;
reg [1:0] M;
reg manual_plus;
reg pc_clr;
reg [1:0] RA;
reg rd;
reg wr;
// wires                                               
wire [7:0] opt1;
wire [7:0] opt2;
wire [7:0] PC;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;
wire [7:0] res_alu;
wire [1:0] res_dest;

wire sampler;                             

// assign statements (if any)                          
exp8 i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.clk(clk),
	.enact(enact),
	.key_out(key_out),
	.M(M),
	.manual_plus(manual_plus),
	.opt1(opt1),
	.opt2(opt2),
	.PC(PC),
	.pc_clr(pc_clr),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.RA(RA),
	.rd(rd),
	.res_alu(res_alu),
	.res_dest(res_dest),
	.wr(wr)
);

// cin
initial
begin
	cin = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// enact
initial
begin
	enact = 1'b1;
	enact = #550000 1'b0;
	enact = #20000 1'b1;
	enact = #180000 1'b0;
	enact = #40000 1'b1;
	enact = #150000 1'b0;
	enact = #30000 1'b1;
end 

// manual_plus
initial
begin
	manual_plus = 1'b1;
	manual_plus = #660000 1'b0;
	manual_plus = #30000 1'b1;
	manual_plus = #130000 1'b0;
	manual_plus = #30000 1'b1;
end 
// key_out[ 7 ]
initial
begin
	key_out[7] = 1'b0;
	key_out[7] = #130000 1'b1;
	key_out[7] = #130000 1'b0;
end 
// key_out[ 6 ]
initial
begin
	key_out[6] = 1'b1;
	key_out[6] = #130000 1'b0;
	key_out[6] = #130000 1'b1;
	key_out[6] = #130000 1'b0;
end 
// key_out[ 5 ]
initial
begin
	key_out[5] = 1'b0;
	key_out[5] = #130000 1'b1;
	key_out[5] = #130000 1'b0;
end 
// key_out[ 4 ]
initial
begin
	key_out[4] = 1'b1;
	key_out[4] = #130000 1'b0;
	key_out[4] = #260000 1'b1;
	key_out[4] = #100000 1'b0;
end 
// key_out[ 3 ]
initial
begin
	key_out[3] = 1'b1;
	key_out[3] = #130000 1'b0;
	key_out[3] = #130000 1'b1;
	key_out[3] = #130000 1'b0;
end 
// key_out[ 2 ]
initial
begin
	key_out[2] = 1'b1;
	key_out[2] = #260000 1'b0;
	key_out[2] = #130000 1'b1;
	key_out[2] = #100000 1'b0;
end 
// key_out[ 1 ]
initial
begin
	key_out[1] = 1'b0;
	key_out[1] = #130000 1'b1;
	key_out[1] = #130000 1'b0;
	key_out[1] = #130000 1'b1;
	key_out[1] = #100000 1'b0;
end 
// key_out[ 0 ]
initial
begin
	key_out[0] = 1'b1;
	key_out[0] = #260000 1'b0;
end 

// pc_clr
initial
begin
	pc_clr = 1'b1;
end 
// RA[ 1 ]
initial
begin
	RA[1] = 1'b0;
	RA[1] = #260000 1'b1;
	RA[1] = #230000 1'b0;
end 
// RA[ 0 ]
initial
begin
	RA[0] = 1'b0;
	RA[0] = #130000 1'b1;
	RA[0] = #130000 1'b0;
	RA[0] = #130000 1'b1;
	RA[0] = #100000 1'b0;
end 

// rd
initial
begin
	rd = 1'b1;
	rd = #490000 1'b0;
end 

// wr
initial
begin
	wr = 1'b0;
end 
// M[ 1 ]
initial
begin
	M[1] = 1'b0;
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b0;
end 

exp8_vlg_sample_tst tb_sample (
	.cin(cin),
	.clk(clk),
	.enact(enact),
	.key_out(key_out),
	.M(M),
	.manual_plus(manual_plus),
	.pc_clr(pc_clr),
	.RA(RA),
	.rd(rd),
	.wr(wr),
	.sampler_tx(sampler)
);

exp8_vlg_check_tst tb_out(
	.opt1(opt1),
	.opt2(opt2),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.res_alu(res_alu),
	.res_dest(res_dest),
	.sampler_rx(sampler)
);
endmodule

